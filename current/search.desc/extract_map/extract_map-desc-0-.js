searchState.loadedDescShard("extract_map", 0, "See <code>ExtractMap</code> for the main documentation.\nA trait for extracting the key for an <code>ExtractMap</code>.\nA hash map for memory efficent storage of value types …\nThe type of the elements being iterated over.\nLike <code>Iterator</code>, but items may borrow from <code>&amp;mut self</code>.\nAdvances the lending iterator by <code>n</code> elements.\nRetrieves the number of remaining values that can be …\nTakes two lending iterators and creates a new lending …\nCreates a lending iterator which <code>clone</code>s all of its …\nChecks if a value is in the <code>ExtractMap</code>.\nReturns the number of items in the lending iterator.\nCreates a lending iterator which gives the current …\nExtracts the key that this value should be referred to …\nCreates a lending iterator which uses a closure to …\nCreates a lending iterator that both filters and maps.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of the lending iterator.\nReturns the argument unchanged.\nRetrieves a value from the <code>ExtractMap</code>.\nRetrieves a mutable guard to a value in the <code>ExtractMap</code>.\nInserts a value into the <code>ExtractMap</code>.\nCalls <code>U::from(self)</code>.\nRetrieves if the <code>ExtractMap</code> contains no values.\nRetrieves an iterator over the borrowed values.\nRetrieves a <code>LendingIterator</code> over mutable borrowed values.\nRetrieves the number of values currently in the <code>ExtractMap</code>.\nTakes a closure and creates a lending iterator which calls …\nCreates a new, empty <code>ExtractMap</code> with the <code>RandomState</code> …\nAdvances the lending iterator and returns the next value.\nReturns the <code>n</code>th element of the lending iterator.\nRemoves a value from the <code>ExtractMap</code>.\nA serialize method to serialize a <code>ExtractMap</code> to a map …\nReturns the bounds on the remaining length of the iterator.\nCreates a lending iterator that skips over the first <code>n</code> …\nCreates a lending iterator starting at the same point, but …\nCreates a lending iterator that lends the first <code>n</code> …\nCreates a lending iterator that lends items matching a …\nCreates a new <code>ExtractMap</code> with the <code>RandomState</code> hasher and …\nCreates a new <code>ExtractMap</code> with the provided hasher and …\nCreates a new, empty <code>ExtractMap</code> with the provided hasher.\n‘Zips up’ two lending iterators into a single lending …")