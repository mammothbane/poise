searchState.loadedDescShard("small_fixed_array", 0, "A crate for <code>FixedArray</code> and <code>FixedString</code>, types to provide a …\nA fixed size array with length provided at creation …\nA fixed size String with length provided at creation …\nA sealed helper trait for calling …\nA sealed trait to represent valid lengths for a <code>FixedArray</code>.\nConverts <code>&amp;</code><code>FixedArray&lt;T&gt;</code> to <code>&amp;[T]</code>, this conversion can be …\nConverts <code>&amp;mut </code><code>FixedArray&lt;T&gt;</code> to <code>&amp;mut [T]</code>, this conversion …\nConverts <code>&amp;</code><code>FixedString</code> to <code>&amp;str</code>, this conversion can be …\nCreates a new, empty <code>FixedArray</code> that cannot be pushed to.\nCreates a new, empty <code>FixedArray</code> that cannot be pushed to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>&amp;&#39;static str</code> into a <code>FixedString</code>.\nConverts a <code>&amp;str</code> into a <code>FixedString</code>, allocating if the …\nConverts a <code>String</code> into a <code>FixedString</code>, <strong>truncating</strong> if the …\nConverts <code>Vec&lt;T&gt;</code> into <code>FixedArray&lt;T&gt;</code> while truncating the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>FixedArray&lt;T&gt;</code> to <code>Box&lt;[T]&gt;</code>, this operation should …\nConverts <code>FixedString</code> to <code>String</code>, this operation should be …\nConverts <code>FixedArray&lt;T&gt;</code> to <code>Vec&lt;T&gt;</code>, this operation should be …\nReturns if the length is equal to 0.\nReturns if the length is equal to 0.\nReturns the length of the <code>FixedArray</code>.\nReturns the length of the <code>FixedString</code>.\nAlias to <code>FixedArray::empty</code>.")